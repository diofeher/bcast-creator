Implementing a composition tool to Browsercast
==============================================

Abstract
--------
The aim of this project is to implement a composition tool to BrowserCast (using Reveal.js, WebAudio API and Thimble) and improve the project with timelines, cross-browser support and more useful features.

Contents
--------
Personal Details
----------------
Name: Diógenes Augusto Fernandes Hermínio
Email: diofeher@gmail.com
Other contact methods: gtalk, +558388569829

Project Proposal
----------------
To investigate and begin implementation of the new EcmaScript 3.1 language features in Rhino, based on the latest version of the EcmaScript 3.1 specification. This would be done progressively, continuing to deliver working code in small increments over the course of the program, in order to provide transparency and expose trouble spots early. Tests will be provided for all new code, or tests from SpiderMonkey could be used when available.

I have the read parts of the specification document relating to the new features, along with other supporting documents about the spec. I have also studied the Rhino source code, and implemented a proof-of-concept for the new Object.getPrototypeOf method on top the code for Rhino 1.7 Release 2, including a patch and tests.

Schedule of Deliverables
------------------------
Apr 20 - May 10: (three weeks) Studying the spec and the code, and discussions with the mentor and community on its interpretation and how it might best be implemented in Rhino.

May 11 - May 17: (one week) Convert the ReadOnly, DontEnum and DontDelete property attributes to Writable, Enumerable and Configurable, including any necessary changes in semantics.

May 18 - Jun 14: (four weeks) Add the new methods on Object which expose, manipulate or depend on these attributes.

Jun 15 - Jul 12: (four weeks) Add the new JSON object. Exam period and short overseas trip so light workload over this period.

Jul 13 - Jul 26: (two weeks) Add the new methods to the Function, Array, String and Boolean builtins

Jul 27 - Aug 09: (two weeks) Handling unforseen problems if necessary, and/or adding the new methods to the Number and Date builtins, and/or modifying the parser to handle specifying property attributes in object literals.

Aug 10 - Aug 17: (one week) Tidying up any loose ends, ensuring the code is integrated and made available on Google Code and in the Mozilla repositories.

I will be studying at 3/4 load until the end of June. I will then be free to work on this full-time from mid-July until mid-August.

Open Source Development Experience
----------------------------------
I've joined Google Summer of Code twice in the past. I worked integrating Jinja2 to MoinMoin and adding two new chart types to Javascript Infovis Toolkit (Sencha Labs). I did a pull request to jQuery once and contributed to Sisyphus.js too. All the projects that I do for university I put on my github too to help anyone who has the same problems.

Work/Internship Experience
--------------------------
I've been working with web development since 2009. I started with Python/Django and tried to expert in this area. One of the interships I got was related to webcam facial recognition. Now I'm working at crowdSPRING as Front-End developer, doing a lot of Javascript, Selenium and Python code. I have experience with all the Web Stack, Python (Django/Twisted and a lot of other frameworks).

Academic Experience
-------------------
I completed a B.Sc. (Internet Systems) at the Institute of Science, Technology and Education of Paraíba in 2010, and now I'm finishing off my Specialization (Mobile Devices). I am expected to graduate in December.

Other Experience
----------------
I've been doing some experiments using HTML5: http://www.diofeher.net/spacedrum and giving talks about WebAudioAPI (I did a live beatbox using http://www.diofeher.net/paraibajs/live.html ). 

Why Mozilla
------------
Since I was little I have a passion for Mozilla. I've been using Mozilla Firefox for many years and I would be definetaly proud to work with this organization. I always use documentation produced by Mozilla too, I love MDN.